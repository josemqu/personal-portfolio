---
import ArrowDown from "../../icons/arrow-down.astro";
import Section from "../Section.astro";
import type { Work, Titles } from "@/types/cv.ts";

interface Props {
  work: Work[];
  titles: Titles;
}

const { work, titles } = Astro.props;
// Group work experiences by company name
const groupedWorks = Object.values(
  work.reduce(
    (
      acc: Record<string, { name: string; url?: string | null; items: Work[] }>,
      item
    ) => {
      const key = item.name;
      if (!acc[key]) {
        acc[key] = { name: item.name, url: item.url, items: [] };
      }
      acc[key].items.push(item);
      return acc;
    },
    {}
  )
);
---

<Section title={titles.work}>
  <ul>
    {
      groupedWorks.map((group, gIndex) => (
        <li
          class="company-item section-animate"
          style={`animation-delay: ${gIndex * 0.1}s`}
        >
          <div class="bullet" />
          <article>
            <header class="company-header">
              <a href={group.url} title={`Ver ${group.name}`} target="_blank">
                <h3>{group.name}</h3>
              </a>
            </header>
            <ul class="company-experiences">
              {group.items.map(
                ({ startDate, endDate, position, summary }, index) => {
                  const startYear = new Date(startDate).getFullYear();
                  const endYear =
                    endDate != null
                      ? new Date(endDate).getFullYear()
                      : `${titles.now}`;
                  const years = `${startYear} - ${endYear}`;
                  return (
                    <li class="experience-item">
                      <div class="bullet small" />
                      <article>
                        <header class="collapsible experience-collapsible">
                          <div>
                            <h4>{position}</h4>
                          </div>
                          <div class="right">
                            <h3>
                              <time>{years}</time>
                            </h3>
                            <div class="button">
                              <ArrowDown />
                            </div>
                          </div>
                        </header>
                        <footer class="content">
                          {Array.isArray(summary) ? (
                            summary.map((text) => <p>{text}</p>)
                          ) : (
                            <p>{summary}</p>
                          )}
                        </footer>
                      </article>
                    </li>
                  );
                }
              )}
            </ul>
          </article>
        </li>
      ))
    }
  </ul>
</Section>

<style>
  ul {
    display: flex;
    flex-direction: column;
    margin-left: 0.5rem;
  }

  li {
    padding: 0 0 0.5rem 1rem;
    border-left: 2px solid var(--block-quote-border);
    position: relative;
    display: flex;
  }

  /* Nested experience items use the lighter border */
  .company-experiences > li {
    border-left: 2px solid var(--block-quote-border-small);
  }

  .bullet {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: solid 4px var(--block-quote-border);
    position: absolute;
    top: 0.7rem;
    left: -5px;
  }

  .bullet.small {
    width: 6px;
    height: 6px;
    border-width: 3px;
    border-color: var(--block-quote-border-small);
    left: -4px;
    top: 0.9rem;
  }

  article * {
    transition: transform 0.2s ease-in-out;
  }

  article {
    width: 100%;
  }

  article h3 {
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--bold-text);
    transition: color 0.2s ease-in-out;
  }

  [data-theme="dark"] article h3 {
    color: #f5f5f5;
  }

  article a {
    color: var(--nav-text);
  }

  article a:hover {
    text-decoration: underline;
  }

  article h4 {
    color: var(--bold-text);
    font-weight: 400;
  }

  .company-header h3 {
    margin-bottom: 0.25rem;
  }

  .company-experiences {
    display: flex;
    flex-direction: column;
    margin: 0.25rem 0 0 0.75rem;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 4px;
    cursor: pointer;
    transition: opacity 0.2s ease-in-out;
    border-radius: 4px;
    padding: 4px 8px;
  }

  header:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }

  [data-theme="dark"] header:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  time {
    color: var(--block-quote-border);
    font-size: 0.85rem;
    min-width: 102px;
    text-wrap: nowrap;
    margin-left: 0.5rem;
    user-select: none;
  }

  .right {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 1rem;
  }

  .button {
    color: var(--bold-text);
    background-color: none;
    border: none;
    cursor: pointer;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform: rotate(0deg);
    will-change: transform;
  }

  .button:hover {
    opacity: 0.9;
  }

  .button.active {
    transform: rotate(180deg);
  }

  .content {
    max-height: 0;
    opacity: 0;
    transition:
      max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1),
      opacity 0.3s ease-in-out;
    overflow: hidden;
    will-change: max-height, opacity;
  }

  .content.show {
    max-height: 1000px; /* Adjust this value based on your content's maximum height */
    opacity: 1;
    transition:
      max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1),
      opacity 0.3s ease-in-out 0.1s;
  }

  /* Small spacing between summary paragraphs */
  .content p {
    margin: 0 0 0.5rem 0;
  }

  .content p:last-child {
    margin-bottom: 0;
  }

  @media (width <= 700px) {
    time {
      text-align: right;
    }
  }
</style>

<script>
  function initializeExperienceCollapsible() {
    let coll = document.getElementsByClassName("experience-collapsible");
    let i;

    // Remove existing listeners to avoid duplicates
    for (i = 0; i < coll.length; i++) {
      const element = coll[i] as HTMLElement;
      const newElement = element.cloneNode(true) as HTMLElement;
      element.parentNode?.replaceChild(newElement, element);
    }

    // Re-get elements after cloning
    coll = document.getElementsByClassName("experience-collapsible");

    for (i = 0; i < coll.length; i++) {
      coll[i].addEventListener("click", function (this: HTMLElement) {
        let content = this.nextElementSibling as HTMLElement;
        content?.classList.toggle("show");
        this.querySelector(".button")?.classList.toggle("active");
      });
    }
  }

  // Initialize on page load
  initializeExperienceCollapsible();

  // Re-initialize after view transitions
  document.addEventListener("astro:page-load", initializeExperienceCollapsible);
</script>
