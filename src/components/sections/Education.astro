---
import Section from "../Section.astro";
import ArrowDown from "../../icons/arrow-down.astro";
import type { Education, Titles } from "@/types/cv.ts";

interface Props {
  education: Education[];
  titles: Titles;
}

const { education, titles } = Astro.props;
const title = titles.education;
---

<Section title={title}>
  <ul>
    {
      education.map(
        ({ institution, college, startDate, endDate, area, url }, index) => {
          const startYear = new Date(startDate).getFullYear();
          const endYear =
            endDate != null ? new Date(endDate).getFullYear() : `${titles.now}`;
          const years = `${startYear} - ${endYear}`;

          return (
            <li class="experience-item section-animate" style={`animation-delay: ${index * 0.1}s`}>
              <div class="bullet" />
              <article>
                <header class="collapsible education-collapsible">
                  <div>
                    <a href={url} title={`Ver ${url}`} target="_blank">
                      <h3>{institution}</h3>
                    </a>
                    <h4>{area}</h4>
                  </div>
                  <div class="right">
                    <h3>
                      <time>{years}</time>
                    </h3>
                    <div class="button">
                      <ArrowDown />
                    </div>
                  </div>
                </header>
                <footer class="content">
                  <p>{college}</p>
                </footer>
              </article>
            </li>
          );
        }
      )
    }
  </ul>
</Section>

<style>
  ul {
    display: flex;
    flex-direction: column;
    margin-left: 0.5rem;
  }

  li {
    padding: 0 0 0.5rem 1rem;
    border-left: 2px solid var(--block-quote-border);
    position: relative;
    display: flex;
  }

  .bullet {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    border: solid 4px var(--block-quote-border);
    position: absolute;
    top: 0.7rem;
    left: -5px;
  }

  article * {
    transition: transform 0.2s ease-in-out;
  }

  article {
    width: 100%;
  }

  article h3 {
    font-size: 1.2rem;
    font-weight: 500;
    color: var(--bold-text);
    transition: color 0.2s ease-in-out;
  }

  [data-theme="dark"] article h3 {
    color: #f5f5f5;
  }

  article h4 {
    color: var(--bold-text);
    font-weight: 400;
  }

  header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 4px;
    cursor: pointer;
    transition: opacity 0.2s ease-in-out;
    border-radius: 4px;
    padding: 4px 8px;
  }

  header:hover {
    background-color: rgba(0, 0, 0, 0.03);
  }

  [data-theme="dark"] header:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  time {
    color: var(--block-quote-border);
    font-size: 0.85rem;
    min-width: 102px;
    text-wrap: nowrap;
    margin-left: 0.5rem;
    user-select: none;
  }

  .right {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    gap: 1rem;
  }

  .button {
    color: var(--bold-text);
    background-color: none;
    border: none;
    cursor: pointer;
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform: rotate(0deg);
    will-change: transform;
  }

  .button.active {
    transform: rotate(180deg);
  }

  .content {
    max-height: 0;
    opacity: 0;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease-in-out;
    overflow: hidden;
    will-change: max-height, opacity;
  }

  .content.show {
    max-height: 1000px; /* Adjust this value based on your content's maximum height */
    opacity: 1;
    transition: max-height 0.5s cubic-bezier(0.4, 0, 0.2, 1), opacity 0.3s ease-in-out 0.1s;
  }

  /* Style the collapsible content. Note: hidden by default */
  /* .collapsed { */
  /* height: 0; */
  /* transform:scaleY( 0); */
  /* overflow: hidden; */
  /* } */

  @media (width <= 700px) {
    time {
      text-align: right;
    }
  }
</style>

<script>
  function initializeEducationCollapsible() {
    let coll = document.getElementsByClassName("education-collapsible");
    let i;

    // Remove existing listeners to avoid duplicates
    for (i = 0; i < coll.length; i++) {
      const element = coll[i] as HTMLElement;
      const newElement = element.cloneNode(true) as HTMLElement;
      element.parentNode?.replaceChild(newElement, element);
    }

    // Re-get elements after cloning
    coll = document.getElementsByClassName("education-collapsible");
    
    for (i = 0; i < coll.length; i++) {
      coll[i].addEventListener("click", function (this: HTMLElement) {
        let content = this.nextElementSibling as HTMLElement;
        content?.classList.toggle("show");
        this.querySelector(".button")?.classList.toggle("active");
      });
    }
  }

  // Initialize on page load
  initializeEducationCollapsible();

  // Re-initialize after view transitions
  document.addEventListener('astro:page-load', initializeEducationCollapsible);
</script>
