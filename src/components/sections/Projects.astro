---
import GitHub from "@/icons/GitHub.astro";
import PlayStore from "@/icons/PlayStore.astro";
import Section from "../Section.astro";
import type { Projects, Titles } from "@/types/cv.ts";

interface Props {
  projects: Projects[];
  titles: Titles;
}

const { projects, titles } = Astro.props;
const title = titles.projects;
---

<Section title={title}>
  <ul>
    {
      projects?.map(
        ({
          name,
          isActive,
          description,
          highlights,
          url,
          github,
          playStore,
        }) => {
          const urlSrc = url ? new URL(url) : "#";
          const playStoreSrc = playStore ? new URL(playStore) : "#";
          return (
            <li>
              <article>
                <header>
                  <h3>
                    <div class="nowrap">
                      <a
                        href={urlSrc}
                        target="_blank"
                        title={`${titles.viewProject} ${name}`}
                      >
                        {name}
                      </a>
                      {isActive && <span class="running">&#x25cf;</span>}
                      {github && (
                        <a
                          class="github-code-link"
                          href={github}
                          target="_blank"
                          title={`${titles.viewCode} ${name}`}
                        >
                          <GitHub />
                        </a>
                      )}
                      {playStore && (
                        <a
                          class="github-code-link"
                          href={playStoreSrc}
                          target="_blank"
                          title={`${name} ${titles.inPlayStore}`}
                        >
                          <PlayStore />
                        </a>
                      )}
                    </div>
                  </h3>
                  <p>{description}</p>
                </header>
                <footer>
                  {highlights.map((highlight) => {
                    return <span>{highlight}</span>;
                  })}
                </footer>
              </article>
            </li>
          );
        }
      )
    }
  </ul>
</Section>

<style>
  ul {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(210px, 1fr));
    gap: 1rem;
    /* margin-inline: 8px; */
  }

  article {
    border-radius: 8px;
    border: 2px solid var(--block-quote-border);
    gap: 16px;
    display: flex;
    flex-direction: column;
    padding: 16px;
    height: 100%;
  }

  article header {
    flex: 1;
  }

  article h3 {
    font-size: 1.2rem;
    font-weight: 500;
    margin-bottom: 4px;
  }

  article a {
    color: var(--bold-text);
  }

  article a:hover {
    text-decoration: underline;
  }

  article h3 span.running {
    font-size: x-small;
    color: var(--running-bg);
  }

  footer {
    display: flex;
    flex-wrap: wrap;
    gap: 4px;
  }

  .nowrap {
    display: flex;
    flex-wrap: nowrap;
    align-items: center;
    gap: 0.2rem;
  }

  footer span {
    border-radius: 6px;
    background: var(--pills-bg);
    color: var(--pills-text);
    font-size: 0.6rem;
    font-weight: 500;
    padding: 0.2rem 0.6rem;
  }

  .github-code-link {
    margin-left: 5px;
  }

  .bullet {
    font-size: 1rem;
  }

  @media (width <= 700px) {
    ul {
      /* margin-inline: 0px; */
    }

    article {
      /* border: none; */
      /* box-shadow: 0 1px 1px var(--code); */
      /* padding: 0 0 16px 0; */
    }
  }
</style>
